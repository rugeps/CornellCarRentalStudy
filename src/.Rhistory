i
if (i == 1) cat("Variables que no presenten una distribució normal:\n") {
for (i in 1:ncol(ds)) {
i
}
for (i in 1:ncol(ds)) {
str(i)
}
for (i in 1:ncol(ds)) {
str(i)
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
p_val = ad.test(ds[,i])$p.value
if (p_val < alpha) {
cat(col.names[i])
# Format output
if (i < ncol(ds) - 1) cat(", ")
if (i %% 3 == 0) cat("\n")
}
}
}
for (i in 1:ncol(ds)) {
str(i)
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
p_val = ad.test(ds[,i])$p.value
}
}
for (i in 1:ncol(ds)) {
str(i)
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
str(i)
}
}
for (i in 1:ncol(ds)) {
str(i)
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
str(i)
p_val = ad.test(ds[,i])$p.value
}
}
for (i in 1:ncol(ds)) {
str(i)
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
str(i)
ad.test(ds[,i])$p.value
#    p_val = ad.test(ds[,i])$p.value
}
}
for (i in 1:ncol(ds)) {
str(i)
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
str(ds[,i])
ad.test(ds[,i])$p.value
#    p_val = ad.test(ds[,i])$p.value
}
}
for (i in 1:ncol(ds)) {
str(i)
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
str(ds[,i])
ad.test(ds[,i])
#    p_val = ad.test(ds[,i])$p.value
}
}
# Relació entre el preu diari del lloguer i l'estat on es localitza el vehicle
ggplot(ds, aes(x=location.state, y=rate.daily, fill=location.state)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
ds
# Fem un dataset que contingui tansols les variables categòriques
cat_ds <- modified_mtcars[categorical_features_names]
# Fem un dataset que contingui tansols les variables categòriques
cat_ds <- ds[categorical_features_names]
# Fem un dataset que contingui tansols les variables categòriques
ds[categorical_features_names]
# Fem un dataset que contingui tansols les variables categòriques
ds[c(categorical_features_names)]
# Fem un dataset que contingui tansols les variables categòriques
(categorical_features_names)
# Fem un dataset que contingui tansols les variables categòriques
cat_ds <- ds[c('fuelType', 'location.city', 'location.country', 'location.state', 'owner.id', 'vehicle.make', 'vehicle.model', 'vehicle.type', 'airportcity')
]
# Fem un dataset que contingui tansols les variables categòriques
ds["fuelType"]
# Fem un dataset que contingui tansols les variables categòriques
ds[c("fuelType","location.city")]
# Fem un dataset que contingui tansols les variables categòriques
cat_ds <- ds[c('fuelType', 'location.city', 'location.state', 'owner.id', 'vehicle.make', 'vehicle.model', 'vehicle.type', 'airportcity')]
# Fem un dataset que contingui tansols les variables categòriques
cat_ds <- ds[c('fuelType', 'location.city', 'owner.id', 'vehicle.make', 'vehicle.model', 'vehicle.type', 'airportcity')]
# Visualitzem el dataset
tableplot(cat_ds,sortCol=carb)
install.packages("tabplot")
# Fem un dataset que contingui tansols les variables categòriques
cat_ds <- ds[c('fuelType', 'location.city', 'owner.id', 'vehicle.make', 'vehicle.model', 'vehicle.type', 'airportcity')]
# Visualitzem el dataset
tableplot(cat_ds,sortCol=carb)
install.packages("tabplot")
library(tabplot)
install.packages("tabplot")
library(vcd)
install.packages("vcd")
library(vcd)
# Fem un dataset que contingui tansols les variables categòriques
ds
knitr::opts_chunk$set(echo = TRUE)
# Carreguem les llibreries que farem servir
library(tidyverse)
library(ggplot2)
library(dplyr)
library(GGally)
library(arules)
library(reshape2)
library(regclass)
library(car)
library(nortest)
library(gridExtra)
library(ResourceSelection)
library(DescTools)
old <- theme_set(theme_minimal())
# Carreguem el joc de dades
ds <- read.csv('../data/CarRentalDataV1.csv', stringsAsFactors = FALSE, header = TRUE, sep=',', strip.white = TRUE)
# Verifiquem les dimensions del joc de dades
dim(ds)
# Verifiquem l'estructura del joc de dades
str(ds)
categorical_features_names = c('fuelType', 'location.city', 'location.country', 'location.state', 'owner.id', 'vehicle.make', 'vehicle.model', 'vehicle.type', 'airportcity')
numeric_features_names = c('rating', 'renterTripsTaken', 'reviewCount', 'location.latitude', 'location.longitude', 'rate.daily', 'vehicle.year')
# Mostrem un resum dels principals estadístics de cada variable
summary(ds[, numeric_features_names])
# Calculem histogrames de les variables numèriques
hist01 <- ggplot(data=ds, aes(x=rating)) + geom_histogram(bins = 20) + xlab('Rating') + ylab('Freqüència')
hist02 <- ggplot(data=ds, aes(x=renterTripsTaken)) + geom_histogram(bins=30) + xlab('Renter Trips Taken') + ylab('Freqüència')
hist03 <- ggplot(data=ds, aes(x=reviewCount)) + geom_histogram(bins=30) + xlab('Review Count') + ylab('Freqüència')
hist04 <- ggplot(data=ds, aes(x=location.latitude)) + geom_histogram(bins=10) + xlab('Latitut') + ylab('Freqüència')
hist05 <- ggplot(data=ds, aes(x=location.longitude)) + geom_histogram(bins=10) + xlab('Longitut') + ylab('Freqüència')
hist06 <- ggplot(data=ds, aes(x=rate.daily)) + geom_histogram(bins=30) + xlab('Daily rate') + ylab('Freqüència')
hist07 <- ggplot(data=ds, aes(x=vehicle.year)) + geom_histogram(bins=13) + xlab('Vehicle Year') + ylab('Freqüència')
grid.arrange(hist01, hist02, hist03, hist04, nrow = 2, ncol = 2)
grid.arrange(hist05, hist06, hist07, nrow = 2, ncol = 2)
# Calculem diagrames de caixa de les variables numèriques
box01 <-ggplot(ds, aes(y=rating)) + geom_boxplot()
box02 <-ggplot(ds, aes(y=renterTripsTaken)) + geom_boxplot()
box03 <-ggplot(ds, aes(y=reviewCount)) + geom_boxplot()
box04 <-ggplot(ds, aes(y=location.latitude)) + geom_boxplot()
box05 <-ggplot(ds, aes(y=location.longitude)) + geom_boxplot()
box06 <-ggplot(ds, aes(y=rate.daily)) + geom_boxplot()
box07 <-ggplot(ds, aes(y=vehicle.year)) + geom_boxplot()
grid.arrange(box01, box02, box03, box04,  nrow = 2, ncol = 2)
grid.arrange(box05, box06, box07, nrow = 2, ncol = 2)
n <- length(ds$rating)
n - boxplot.stats(ds$rating)$n
n - boxplot.stats(ds$renterTripsTaken)$n
n - boxplot.stats(ds$reviewCount)$n
n - boxplot.stats(ds$location.latitude)$n
n - boxplot.stats(ds$location.longitude)$n
n - boxplot.stats(ds$rate.daily)$n
n- boxplot.stats(ds$vehicle.year)$n
ggplot(data=ds,aes(x=fuelType))+geom_bar() + ylab("nombre de vehicles")
ggplot(data=ds,aes(x=location.city))+geom_bar() + ylab("nombre de vehicles")
# Seleccionem les dades
location.city_ordered <- sort(table(ds$location.city),decreasing = TRUE)
# Creem la visualització
par(las=2, cex=0.5, mar=c(8,4,4,2))
barplot(location.city_ordered[0:30], main="Nombre de vehicles segons location.city", ylab="Nombre de vehicles")
ggplot(data=ds,aes(x=location.state))+geom_bar()+theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
ggplot(data=ds,aes(x=airportcity))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
# Seleccionem les dades
airportcity_ordered <- sort(table(ds$airportcity),decreasing = TRUE)
# Creem la visualització
par(las=2, cex=0.5, mar=c(8,4,4,2))
barplot(airportcity_ordered[0:30], main="Nombre de vehicles segons l'aeroport més proper", ylab="Nombre de vehicles")
ggplot(data=ds,aes(x=vehicle.make))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
ds$vehicle.make[ds$vehicle.make == "Alfa-romeo"] = "Alfa Romeo"
ds$vehicle.make[ds$vehicle.make == "Infiniti"] = "INFINITI"
ds$vehicle.make[ds$vehicle.make == "Mercedes-benz"] = "Mercedes-Benz"
ggplot(data=ds,aes(x=vehicle.make))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
ggplot(data=ds,aes(x=vehicle.model))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
# Seleccionem les dades
vehicle.model_ordered <- sort(table(ds$vehicle.model),decreasing = TRUE)
# Creem la visualització
par(las=2, cex=0.5, mar=c(8,4,4,2))
barplot(vehicle.model_ordered[0:30], main="Nombre de vehicles segons el model", ylab="Nombre de vehicles")
ggplot(data=ds,aes(x=vehicle.type))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
# Fem un dataset que contingui tansols les variables categòriques
ds
mosaic(ds(c("fuelType","vehicle.model","vehicle.type")), shade = TRUE)
mosaic(ds[c("fuelType","vehicle.model","vehicle.type")], shade = TRUE)
ds[c("fuelType","vehicle.model","vehicle.type")]
mosaic(ds[c("fuelType","vehicle.model","vehicle.type")], shade = TRUE)
ds_mosaic <- ds[c("fuelType","vehicle.model","vehicle.type")]
mosaic(ds_mosaic, shade = TRUE)
ds_mosaic <- ds[c("fuelType","vehicle.model","vehicle.type")]
taula <- table(ds$fuelType,ds$vehicle.model,ds$vehicle.type)
mosaic(taula, shade = TRUE)
ds_mosaic <- ds[c("fuelType","vehicle.model","vehicle.type")]
taula <- table(ds$fuelType,ds$vehicle.model)
mosaic(taula, shade = TRUE)
ds_mosaic <- ds[c("fuelType","vehicle.model","vehicle.type")]
taula <- table(ds$fuelType,ds$vehicle.type)
mosaic(taula, shade = TRUE)
ds_mosaic <- ds[c("fuelType","vehicle.model","vehicle.type")]
taula <- table(ds$fuelType,ds$vehicle.type)
mosaic(taula)
ds_mosaic <- ds[c("fuelType","vehicle.model","vehicle.type")]
taula <- table(ds$fuelType,ds$vehicle.type)
mosaic(taula, shade = TRUE)
ds_mosaic <- ds[c("fuelType","vehicle.model","vehicle.type")]
taula <- table(ds$fuelType,ds$vehicle.type)
mosaic(taula, shade = TRUE, legend = TRUE)
taula <- table(ds$fuelType,ds$vehicle.type)
mosaic(taula, shade = TRUE, legend = TRUE)
mosaic(ds$fuelType ~ ds$vehicle.type, shade = TRUE, legend = TRUE)
mosaic(ds$fuelType ~ ds$vehicle.type)
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 10))
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8))
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2)
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 0.7,)
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 0.7, rot_labels=c(0,90,0,0))
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 0.7, rot_labels=c(0,90,90,0))
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 0.7, rot_labels=c(90,90,0,0))
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 2, rot_labels=c(90,90,0,0))
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 2, rot_labels=c(90,90,0,0), shade=TRUE)
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 2, rot_labels=c(90,90,0,0), shade=TRUE)
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 2, rot_labels=c(90,90,0,0), shade=TRUE)
mosaic(ds$fuelType ~ ds$vehicle.type ~ ds$vehicle.model, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 2, rot_labels=c(90,90,0,0), shade=TRUE)
mosaic(ds$fuelType ~ ds$vehicle.type ~ ds$vehicle.model)
mosaic(ds$fuelType ~ ds$vehicle.model)
knitr::opts_chunk$set(echo = TRUE)
# Carreguem les llibreries que farem servir
library(tidyverse)
library(ggplot2)
library(dplyr)
library(GGally)
library(arules)
library(reshape2)
library(regclass)
library(car)
library(nortest)
library(gridExtra)
library(ResourceSelection)
library(DescTools)
library(vcd)
old <- theme_set(theme_minimal())
# Carreguem el joc de dades
ds <- read.csv('../data/CarRentalDataV1.csv', stringsAsFactors = FALSE, header = TRUE, sep=',', strip.white = TRUE)
# Verifiquem les dimensions del joc de dades
dim(ds)
# Verifiquem l'estructura del joc de dades
str(ds)
categorical_features_names = c('fuelType', 'location.city', 'location.country', 'location.state', 'owner.id', 'vehicle.make', 'vehicle.model', 'vehicle.type', 'airportcity')
numeric_features_names = c('rating', 'renterTripsTaken', 'reviewCount', 'location.latitude', 'location.longitude', 'rate.daily', 'vehicle.year')
# Mostrem un resum dels principals estadístics de cada variable
summary(ds[, numeric_features_names])
# Calculem histogrames de les variables numèriques
hist01 <- ggplot(data=ds, aes(x=rating)) + geom_histogram(bins = 20) + xlab('Rating') + ylab('Freqüència')
hist02 <- ggplot(data=ds, aes(x=renterTripsTaken)) + geom_histogram(bins=30) + xlab('Renter Trips Taken') + ylab('Freqüència')
hist03 <- ggplot(data=ds, aes(x=reviewCount)) + geom_histogram(bins=30) + xlab('Review Count') + ylab('Freqüència')
hist04 <- ggplot(data=ds, aes(x=location.latitude)) + geom_histogram(bins=10) + xlab('Latitut') + ylab('Freqüència')
hist05 <- ggplot(data=ds, aes(x=location.longitude)) + geom_histogram(bins=10) + xlab('Longitut') + ylab('Freqüència')
hist06 <- ggplot(data=ds, aes(x=rate.daily)) + geom_histogram(bins=30) + xlab('Daily rate') + ylab('Freqüència')
hist07 <- ggplot(data=ds, aes(x=vehicle.year)) + geom_histogram(bins=13) + xlab('Vehicle Year') + ylab('Freqüència')
grid.arrange(hist01, hist02, hist03, hist04, nrow = 2, ncol = 2)
grid.arrange(hist05, hist06, hist07, nrow = 2, ncol = 2)
# Calculem diagrames de caixa de les variables numèriques
box01 <-ggplot(ds, aes(y=rating)) + geom_boxplot()
box02 <-ggplot(ds, aes(y=renterTripsTaken)) + geom_boxplot()
box03 <-ggplot(ds, aes(y=reviewCount)) + geom_boxplot()
box04 <-ggplot(ds, aes(y=location.latitude)) + geom_boxplot()
box05 <-ggplot(ds, aes(y=location.longitude)) + geom_boxplot()
box06 <-ggplot(ds, aes(y=rate.daily)) + geom_boxplot()
box07 <-ggplot(ds, aes(y=vehicle.year)) + geom_boxplot()
grid.arrange(box01, box02, box03, box04,  nrow = 2, ncol = 2)
grid.arrange(box05, box06, box07, nrow = 2, ncol = 2)
n <- length(ds$rating)
n - boxplot.stats(ds$rating)$n
n - boxplot.stats(ds$renterTripsTaken)$n
n - boxplot.stats(ds$reviewCount)$n
n - boxplot.stats(ds$location.latitude)$n
n - boxplot.stats(ds$location.longitude)$n
n - boxplot.stats(ds$rate.daily)$n
n- boxplot.stats(ds$vehicle.year)$n
ggplot(data=ds,aes(x=fuelType))+geom_bar() + ylab("nombre de vehicles")
ggplot(data=ds,aes(x=location.city))+geom_bar() + ylab("nombre de vehicles")
# Seleccionem les dades
location.city_ordered <- sort(table(ds$location.city),decreasing = TRUE)
# Creem la visualització
par(las=2, cex=0.5, mar=c(8,4,4,2))
barplot(location.city_ordered[0:30], main="Nombre de vehicles segons location.city", ylab="Nombre de vehicles")
ggplot(data=ds,aes(x=location.state))+geom_bar()+theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
ggplot(data=ds,aes(x=airportcity))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
# Seleccionem les dades
airportcity_ordered <- sort(table(ds$airportcity),decreasing = TRUE)
# Creem la visualització
par(las=2, cex=0.5, mar=c(8,4,4,2))
barplot(airportcity_ordered[0:30], main="Nombre de vehicles segons l'aeroport més proper", ylab="Nombre de vehicles")
ggplot(data=ds,aes(x=vehicle.make))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
ds$vehicle.make[ds$vehicle.make == "Alfa-romeo"] = "Alfa Romeo"
ds$vehicle.make[ds$vehicle.make == "Infiniti"] = "INFINITI"
ds$vehicle.make[ds$vehicle.make == "Mercedes-benz"] = "Mercedes-Benz"
ggplot(data=ds,aes(x=vehicle.make))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
ggplot(data=ds,aes(x=vehicle.model))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
# Seleccionem les dades
vehicle.model_ordered <- sort(table(ds$vehicle.model),decreasing = TRUE)
# Creem la visualització
par(las=2, cex=0.5, mar=c(8,4,4,2))
barplot(vehicle.model_ordered[0:30], main="Nombre de vehicles segons el model", ylab="Nombre de vehicles")
ggplot(data=ds,aes(x=vehicle.type))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 2, rot_labels=c(90,90,0,0), shade=TRUE)
# Estadístiques de valors buits, validem si hi ha valors buits
colSums(is.na(ds))
# Estadístiques de valors buits, validem si hi ha valors buits
colSums(ds=="")
most_freq_fuelType <- names(which.max(table(ds$fuelType)))
most_freq_rating <- names(which.max(table(ds$rating)))
most_freq_fuelType
most_freq_rating
# Prenem el valor més freqüent per als valors buits
ds$fuelType[ds$fuelType == ""] = most_freq_fuelType
ds$rating[is.na(ds$rating)] = as.numeric(most_freq_rating)
# Visualitzem de nou si hi ha valors buits
colSums(is.na(ds))
colSums(ds=="")
n <- length(ds$rating)
n - boxplot.stats(ds$rating)$n
# Per a quines variables tindria sentit un procés de discretizació?
apply(ds, 2, function(x) length(unique(x)))
# Convertim les variables discretes a factors
ds[,categorical_features_names] <- lapply(ds[,categorical_features_names] , factor)
# Mostrem el resultat
str(ds)
# Discretització amb intevals prefixats, de les valoracions
table(discretize(ds$rating, method = "fixed", c(0, 4.5, Inf), labels = c('Bad', 'Good')))
hist(ds$rating, breaks = 20, main = "Discretització amb intervals prefixats", xlab = "Valoració")
cuts_rating <- discretize(ds$rating, method = "fixed",c(0, 4.5, Inf), onlycuts = TRUE)
abline(v = cuts_rating, col = "red")
# Discretització amb intevals prefixats, de les valoracions
ds['rating.discret'] <- discretize(ds$rating, method = "fixed", breaks = c(0, 4.5, Inf), labels = c('Bad', 'Good'))
ds$rating.discret = as.factor(ds$rating.discret)
# Calculem gràfic de barres
ggplot(data=ds, aes(x = rating.discret)) + geom_bar(aes(y = (..count..)/sum(..count..))) + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust = -0.5) + scale_y_continuous(labels = scales::percent, limits = c(0,1)) + xlab('Rent') + ylab("Percentatge")
# Correcció de les marques de vehicles, diferències tipogràfiques
ds$vehicle.make[ds$vehicle.make == "Alfa-romeo"] = "Alfa Romeo"
ds$vehicle.make[ds$vehicle.make == "Mercedes-benz"] = "Mercedes-Benz"
ds$vehicle.make[ds$vehicle.make == "INFINITI"] = "Infinitti"
ds$vehicle.make <- droplevels.factor(ds$vehicle.make)
# Antiguitat del vehicle
ds['age'] <- as.integer(format(Sys.Date(), "%Y")) - ds$vehicle.year
# Calculem gràfic de barres de la nova variable
ggplot(data=ds, aes(x = age)) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_x_continuous(breaks = round(seq(min(ds$age), max(ds$age), by = 5), 1)) + xlab('Age') + ylab("Percentatge")
# Vehicle llogat/no llogat
ds['rent'] <- ifelse(ds['renterTripsTaken'] > 0, 1, 0)
ds$rent <- as.factor(ds$rent)
levels(ds$rent) <- c("Not","Yes")
# Calculem gràfic de barres de la variable objectiu
ggplot(data=ds, aes(x = rent)) + geom_bar(aes(y = (..count..)/sum(..count..))) + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust = -0.5) + scale_y_continuous(labels = scales::percent, limits = c(0,1)) + xlab('Rent') + ylab("Percentatge")
# Ingressos anuals vehicle
ds['income'] <- ds$rate.daily * ds$renterTripsTaken / ds$age
# Calculem gràfic de barres de la nova variable
ggplot(data=ds, aes(x=ds$income)) +
geom_histogram(breaks=seq(0, 1000, by=10),
alpha = 1) +
labs(title="Histogram for Income", x="Income", y="Count") +
xlim(c(0,1000)) +
ylim(c(0,500))
ggplot(data=ds, aes(x=ds$income)) +
geom_histogram(breaks=seq(0, 10000, by=100),
alpha = 1) +
labs(title="Histogram for Income", x="Income", y="Count") +
xlim(c(0,10000)) +
ylim(c(0,2000))
# Exportació de les dades preprocessades a un fitxer .CSV
write.csv(ds, '../data/CarRentalDataV1_Clean.csv')
# Eliminem location.country i les coordenades geogràfiques
ds <- subset(ds, select=-c(location.latitude,location.longitude,
location.country))
categorical_features_names = c('fuelType', 'location.city', 'location.state', 'owner.id', 'vehicle.make', 'vehicle.model', 'vehicle.type', 'airportcity')
numeric_features_names = c('rating', 'renterTripsTaken', 'reviewCount', 'rate.daily', 'age', 'income')
# alpha = 0.05
# col.names = colnames(ds)
#
# for (i in 1:ncol(ds)) {
#   if (i == 1) cat("Variables que no presenten una distribució normal:\n")
#     if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
#       p_val = ad.test(ds[,i])$p.value
#       if (p_val < alpha) {
#         cat(col.names[i])
#         # Format output
#         if (i < ncol(ds) - 1) cat(", ")
#         if (i %% 3 == 0) cat("\n")
#       }
#     }
# }
qqnorm(ds$rate.daily, ylab="Daily Rate", xlab="Theorical Quantiles", main="Normal Q-Q Plot")
qqline(ds$rate.daily)
lambda_optima <- BoxCoxLambda(ds$rate.daily)
ds$rate.daily_norm <- BoxCox(ds$rate.daily, lambda = lambda_optima)
ggplot(ds, aes(x = rate.daily)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Preu de lloguer diari")
ggplot(ds, aes(x = rate.daily_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Preu de lloguer diari normalitzat")
qqnorm(ds$rate.daily_norm, ylab="Daily Rate normalized", xlab="Theorical Quantiles", main="Normal Q-Q Plot")
qqline(ds$rate.daily_norm)
lambda_optima <- BoxCoxLambda(ds$rating)
ds$rating_norm <- BoxCox(ds$rating, lambda = lambda_optima)
ggplot(ds, aes(x = rating)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Puntuació")
ggplot(ds, aes(x = rating_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Puntuació normalitzada")
lambda_optima <- BoxCoxLambda(ds$renterTripsTaken)
ds$renterTripsTaken_norm <- BoxCox(ds$renterTripsTaken, lambda = lambda_optima)
ggplot(ds, aes(x = renterTripsTaken)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Nombre de lloguers realitzats")
ggplot(ds, aes(x = renterTripsTaken_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Nombre normalitzat de lloguers realitzats")
lambda_optima <- BoxCoxLambda(ds$reviewCount)
ds$reviewCount_norm <- BoxCox(ds$reviewCount, lambda = lambda_optima)
ggplot(ds, aes(x = reviewCount)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Nombre de comentaris")
ggplot(ds, aes(x = reviewCount_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Nombre normalitzat de comentaris ")
lambda_optima <- BoxCoxLambda(ds$vehicle.year)
ds$vehicle.year_norm <- BoxCox(ds$vehicle.year, lambda = lambda_optima)
ggplot(ds, aes(x = vehicle.year)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Any del cotxe")
ggplot(ds, aes(x = vehicle.year_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Any del cotxe normalitzat")
lambda_optima <- BoxCoxLambda(ds$age)
ds$age_norm <- BoxCox(ds$age, lambda = lambda_optima)
ggplot(ds, aes(x = age)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Antiguetat del cotxe")
ggplot(ds, aes(x = age_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Antiguetat normalitzada dels cotxes")
lambda_optima <- BoxCoxLambda(ds$income)
ds$income_norm <- BoxCox(ds$income, lambda = lambda_optima)
ggplot(ds, aes(x = income)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Ingressos anuals del cotxe")
ggplot(ds, aes(x = income_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Ingressos anuals normalitzats del cotxe")
# Eliminem location.country i les coordenades geogràfiques
ds <- subset(ds, select=-c(rating_norm,renterTripsTaken_norm,
reviewCount_norm,vehicle.year_norm,age_norm,income_norm))
numeric_features_names = c('rating', 'renterTripsTaken', 'reviewCount', 'rate.daily', 'age', 'income', 'rate.daily_norm')
ds
# Relació entre el preu diari del lloguer i el nombre de vegades que s'ha llogat el vehicle
ggplot(ds, aes(x=renterTripsTaken, y=rate.daily)) + geom_point()
# Relació entre el preu diari del lloguer i el nombre de vegades que s'ha llogat el vehicle
ggplot(ds, aes(x=age, y=rate.daily)) + geom_point()
# Relació entre el preu diari del lloguer i el tipus de combustible
ggplot(ds, aes(x=fuelType, y=rate.daily, fill=fuelType)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean)
# Relació entre el preu diari del lloguer i l'estat on es localitza el vehicle
ggplot(ds, aes(x=location.state, y=rate.daily, fill=location.state)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
# Relació entre el preu diari del lloguer i la marca del vehicle
ggplot(ds, aes(x=vehicle.make, y=rate.daily, fill=vehicle.make)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
# Relació entre el preu diari del lloguer i el tipus de vehicle
ggplot(ds, aes(x=vehicle.type, y=rate.daily, fill=vehicle.type)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean)
ggpairs(ds, columns=numeric_features_names, mapping=aes(color=rent), upper = list(continuous = wrap('cor', size = 2)))
ggpairs(ds, columns=numeric_features_names, mapping=aes(color=rating.discret), upper = list(continuous = wrap('cor', size = 2)))
heat <- ds[,numeric_features_names]
qplot(x=Var1, y=Var2, data=melt(cor(heat, use="p")), fill=value, geom="tile") + theme(axis.text.x = element_text(angle = 90)) + coord_fixed()
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "precio"
for (i in 1:(ncol(ds) - 1)) {
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
spearman_test = cor.test(ds[,i], ds[,'rate.daily'], method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(ds)[i]
}
}
print(corr_matrix)
par(mfrow=c(1,3))
x <- ds$rate.daily
qq1 <- qqnorm(x, main = "Normal Q-Q Plot 'Daily rate'")
qqline(x)
x <- ds$rate.daily[ds$fuelType == 'ELECTRIC']
qq2 <- qqnorm(x, main = "Normal Q-Q Plot 'DR - ELECTRIC'")
qqline(x)
x <- ds$rate.daily[ds$fuelType == 'GASOLINE']
qq3 <- qqnorm(x, main = "Normal Q-Q Plot 'DR - GASOLINE'")
qqline(x)
# Obtenim les dades
ELECTRIC <- ds$rate.daily[ds$fuelType == 'ELECTRIC']
GASOLINE <- ds$rate.daily[ds$fuelType == 'GASOLINE']
# Calculem el test d’igualtat de variàncies, amb la funció var.test d'R
var.test(ELECTRIC, GASOLINE)
# variàncies diferents
t.test( ds$rate.daily[ds$fuelType == 'ELECTRIC'],  ds$rate.daily[ds$fuelType == 'GASOLINE'], alternative="greater", var.equal=FALSE)
n <- length(ds$vehicle.type)
prop.test(x=sum(ds$vehicle.type == "van"  | ds$vehicle.type == "minivan"), n=n, p=0.5, alternative="less", correct=FALSE)
model.lm1 <- lm(formula=rate.daily ~ age + renterTripsTaken, data = ds)
summary(model.lm1)
model.lm2 <- lm(formula=rate.daily ~ fuelType + vehicle.make + vehicle.type, data = ds)
summary(model.lm2)
model.lm3 <- lm(formula=rate.daily ~ age + renterTripsTaken + fuelType + vehicle.make + vehicle.type, data = ds)
summary(model.lm3)
ggballoonplot(ds[c("fuelType","vehicle.type")], fill = "vehicles")+
scale_fill_viridis_c(option = "C")
# Carreguem les llibreries que farem servir
library(tidyverse)
library(ggplot2)
library(dplyr)
library(GGally)
library(arules)
library(reshape2)
library(regclass)
library(car)
library(nortest)
library(gridExtra)
library(ResourceSelection)
library(DescTools)
library(vcd)
library(ggpubr)
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
