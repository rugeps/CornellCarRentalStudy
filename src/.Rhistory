library(nortest)
library(gridExtra)
library(ResourceSelection)
library(DescTools)
library(vcd)
library(ggpubr)
library(corrplot)
library(rpart)
library(rpart.plot)
library(gmodels)
library(rattle)
library(Metrics)
library(caret)
library(DMwR)
library(ROSE)
library(grid)
library(gridExtra)
old <- theme_set(theme_minimal())
library(knitr)
library(formatR)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Carreguem el joc de dades
ds <- read.csv('../data/CarRentalDataV1.csv', stringsAsFactors = FALSE, header = TRUE, sep=',', strip.white = TRUE)
# Verifiquem les dimensions del joc de dades
dim(ds)
# Verifiquem l'estructura del joc de dades
str(ds)
categorical_features_names = c('fuelType', 'location.city', 'location.country', 'location.state', 'owner.id', 'vehicle.make', 'vehicle.model', 'vehicle.type', 'airportcity')
numeric_features_names = c('rating', 'renterTripsTaken', 'reviewCount', 'location.latitude', 'location.longitude', 'rate.daily', 'vehicle.year')
# Mostrem un resum dels principals estadístics de cada variable
summary(ds[, numeric_features_names])
# Calculem histogrames de les variables numèriques
hist01 <- ggplot(data=ds, aes(x=rating)) + geom_histogram(bins = 20) + xlab('Rating') + ylab('Freqüència')
hist02 <- ggplot(data=ds, aes(x=renterTripsTaken)) + geom_histogram(bins=30) + xlab('Renter Trips Taken') + ylab('Freqüència')
hist03 <- ggplot(data=ds, aes(x=reviewCount)) + geom_histogram(bins=30) + xlab('Review Count') + ylab('Freqüència')
hist04 <- ggplot(data=ds, aes(x=location.latitude)) + geom_histogram(bins=10) + xlab('Latitut') + ylab('Freqüència')
hist05 <- ggplot(data=ds, aes(x=location.longitude)) + geom_histogram(bins=10) + xlab('Longitut') + ylab('Freqüència')
hist06 <- ggplot(data=ds, aes(x=rate.daily)) + geom_histogram(bins=30) + xlab('Daily rate') + ylab('Freqüència')
hist07 <- ggplot(data=ds, aes(x=vehicle.year)) + geom_histogram(bins=13) + xlab('Vehicle Year') + ylab('Freqüència')
grid.arrange(hist01, hist02, hist03, hist04, nrow = 2, ncol = 2)
grid.arrange(hist05, hist06, hist07, nrow = 2, ncol = 2)
# Calculem diagrames de caixa de les variables numèriques
box01 <-ggplot(ds, aes(y=rating)) + geom_boxplot()
box02 <-ggplot(ds, aes(y=renterTripsTaken)) + geom_boxplot()
box03 <-ggplot(ds, aes(y=reviewCount)) + geom_boxplot()
box04 <-ggplot(ds, aes(y=location.latitude)) + geom_boxplot()
box05 <-ggplot(ds, aes(y=location.longitude)) + geom_boxplot()
box06 <-ggplot(ds, aes(y=rate.daily)) + geom_boxplot()
box07 <-ggplot(ds, aes(y=vehicle.year)) + geom_boxplot()
grid.arrange(box01, box02, box03, box04,  nrow = 2, ncol = 2)
grid.arrange(box05, box06, box07, nrow = 2, ncol = 2)
n <- length(ds$rating)
n - boxplot.stats(ds$rating)$n
n - boxplot.stats(ds$renterTripsTaken)$n
n - boxplot.stats(ds$reviewCount)$n
n - boxplot.stats(ds$location.latitude)$n
n - boxplot.stats(ds$location.longitude)$n
n - boxplot.stats(ds$rate.daily)$n
n- boxplot.stats(ds$vehicle.year)$n
ggplot(data=ds,aes(x=fuelType)) + geom_bar() + ylab("nombre de vehicles")
# Obtenim el valor més freqüent
most_freq_fuelType <- names(which.max(table(ds$fuelType)))
most_freq_fuelType
# Prenem el valor més freqüent per als valors buits
ds$fuelType[ds$fuelType == ""] = most_freq_fuelType
ggplot(data=ds,aes(x=fuelType)) + geom_bar() + ylab("nombre de vehicles")
ggplot(data=ds,aes(x=location.city))+geom_bar() + ylab("nombre de vehicles")
# Seleccionem les dades
location.city_ordered <- sort(table(ds$location.city),decreasing = TRUE)
# Creem la visualització
par(las=2, cex=0.5, mar=c(8,4,4,2))
barplot(location.city_ordered[0:30], main="Nombre de vehicles segons location.city", ylab="Nombre de vehicles")
ggplot(data=ds,aes(x=location.state)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) +
ylab("Nombre de vehicles")
# Carreguem la taula de població per estat
sp <- read.csv('../data/state-population.csv', stringsAsFactors = FALSE, header = TRUE, sep=',', strip.white = TRUE)
# Creem una nova variable on hi introduim la població de l'estat on es troba el vehicle
ds$population <- ds$location.state
# Assignem la població segons l'estat en el que es troba
for (i in sp$state){
ds$population[ds$population == i] = sp$Census[sp$state == i]
}
# convertim la nova variable en numèrica
ds$population <- as.numeric(ds$population)
# Calculem diagrames de caixa i de punts de la nova variable numèrica
ggplot(ds, aes(y=population)) + geom_boxplot()
ggplot(data=ds, aes(x=population)) + geom_histogram(bins=15) + xlab('Population') + ylab('Frequency')
ggplot(data=ds,aes(x=airportcity)) + geom_bar() +
theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) +
ylab("Nombre de vehicles")
# Seleccionem les dades
airportcity_ordered <- sort(table(ds$airportcity),decreasing = TRUE)
# Creem la visualització
par(las=2, cex=0.5, mar=c(8,4,4,2))
barplot(airportcity_ordered[0:30], main="Nombre de vehicles segons l'aeroport més proper", ylab="Nombre de vehicles")
ggplot(data=ds,aes(x=vehicle.make))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
# Correcció de les marques de vehicles, diferències tipogràfiques
ds$vehicle.make[ds$vehicle.make == "Alfa-romeo"] = "Alfa Romeo"
ds$vehicle.make[ds$vehicle.make == "Mercedes-benz"] = "Mercedes-Benz"
ds$vehicle.make[ds$vehicle.make == "Infiniti"] = "Infinitti"
ds$vehicle.make[ds$vehicle.make == "INFINITI"] = "Infinitti"
ds$vehicle.make <- droplevels.factor(ds$vehicle.make)
ggplot(data=ds,aes(x=vehicle.make))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
# Creem vectors per cada categoria de la nova variables
average = c('FIAT', 'Ford', 'Honda', 'Hyundai', 'Jeep', 'Kia', 'Land Rover', 'Mazda', 'Mitsubishi', 'Nissan', 'Polaris', 'Pontiac', 'Saturn', 'Scion', 'Suzuki', 'Toyota', 'Volkswagen', 'Volvo')
high = c('Alfa Romeo', 'Audi', 'BMW', 'Chevrolet', 'Chrysler', 'Dodge', 'GMC', 'HUMMER', 'Mercedes-Benz', 'Tesla', 'MINI', 'Ram', 'Saab', 'smart', 'Subaru')
luxury = c('Acura', 'Aston Martin', 'Bentley', 'Buick', 'Cadillac', 'Ferrari', 'Genesis', 'Infinitti', 'Jaguar', 'Lamborghini', 'Lexus', 'Lincoln', 'Lotus', 'Maserati', 'McLaren', 'Mercury', 'Porsche', 'Rolls Royce')
# Creem i assignem la nova variable;
ds$range[is.element(ds$vehicle.make,average)] = "average"
ds$range[is.element(ds$vehicle.make,high)] = "high"
ds$range[is.element(ds$vehicle.make,luxury)] = "luxury"
# Indiquem a R que es tracta de una variable categorica
ds$range <- droplevels.factor(ds$range)
ggplot(data=ds,aes(x=range))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
ggplot(data=ds,aes(x=vehicle.model))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
# Seleccionem les dades
vehicle.model_ordered <- sort(table(ds$vehicle.model),decreasing = TRUE)
# Creem la visualització
par(las=2, cex=0.5, mar=c(8,4,4,2))
barplot(vehicle.model_ordered[0:30], main="Nombre de vehicles segons el model", ylab="Nombre de vehicles")
ggplot(data=ds,aes(x=vehicle.type))+geom_bar() + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + ylab("nombre de vehicles")
mosaic(ds$fuelType ~ ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 2, rot_labels=c(90,90,0,0), shade=TRUE)
mosaic(ds$fuelType ~ ds$range + ds$vehicle.type, gp_labels = gpar(fontsize = 8), las = 2, cex.axis = 2, rot_labels=c(90,0,0,00), shade=TRUE)
# Preparem les dades
taula = as.data.frame(table(ds$fuelType, ds$vehicle.type))
# Visualitza el Ballonplot
ggballoonplot(taula, fill = "value") + scale_fill_viridis_c(option = "C")
# Estadístiques de valors buits, validem si hi ha valors buits
colSums(is.na(ds))
# Estadístiques de valors buits, validem si hi ha valors buits
colSums(ds=="")
most_freq_rating <- names(which.max(table(ds$rating)))
most_freq_rating
# Prenem el valor més freqüent per als valors buits
ds$rating[is.na(ds$rating)] = as.numeric(most_freq_rating)
# Visualitzem de nou si hi ha valors buits
colSums(is.na(ds))
colSums(ds=="")
n <- length(ds$rating)
n - boxplot.stats(ds$rating)$n
# Per a quines variables tindria sentit un procés de discretizació?
apply(ds, 2, function(x) length(unique(x)))
# Convertim les variables discretes a factors
ds[,categorical_features_names] <- lapply(ds[,categorical_features_names] , factor)
# Mostrem el resultat
str(ds)
# Discretització amb intevals prefixats, de les valoracions
table(discretize(ds$rating, method = "fixed", c(0, 4.5, Inf), labels = c('Bad', 'Good')))
hist(ds$rating, breaks = 20, main = "Discretització amb intervals prefixats", xlab = "Valoració")
cuts_rating <- discretize(ds$rating, method = "fixed",c(0, 4.5, Inf), onlycuts = TRUE)
abline(v = cuts_rating, col = "red")
# Discretització amb intevals prefixats, de les valoracions
ds['rating.discret'] <- discretize(ds$rating, method = "fixed", breaks = c(0, 4.5, Inf), labels = c('Bad', 'Good'))
ds$rating.discret = as.factor(ds$rating.discret)
# Calculem gràfic de barres
ggplot(data=ds, aes(x = rating.discret)) + geom_bar(aes(y = (..count..)/sum(..count..))) + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust = -0.5) + scale_y_continuous(labels = scales::percent, limits = c(0,1)) + xlab('Valoració') + ylab("Percentatge")
summary(ds$population)
ds['population.discr'] <- discretize(ds$population, method = "fixed",c(601722, 5029197, 9687653, 25145561, 37253957), labels = c("low populated", "medium-low populated", "medium-high populated", "highly populated"))
# Calculem gràfic de barres
ggplot(data=ds, aes(x = population.discr)) + geom_bar(aes(y = (..count..)/sum(..count..))) + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust = -0.5) + scale_y_continuous(labels = scales::percent, limits = c(0,1)) + xlab('Població a l entorn') + ylab("Percentatge")
# Factoritzem la nova variable finalment
ds$population.discr = as.factor(ds$population.discr)
# Antiguitat del vehicle
ds['age'] <- as.integer(format(Sys.Date(), "%Y")) - ds$vehicle.year
# Calculem gràfic de barres de la nova variable
ggplot(data=ds, aes(x = age)) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_x_continuous(breaks = round(seq(min(ds$age), max(ds$age), by = 5), 1)) + xlab('Age') + ylab("Percentatge")
# Vehicle llogat/no llogat
ds['rent'] <- ifelse(ds['renterTripsTaken'] > 0, 1, 0)
ds$rent <- as.factor(ds$rent)
levels(ds$rent) <- c("Not","Yes")
# Calculem gràfic de barres de la variable objectiu
ggplot(data=ds, aes(x = rent)) + geom_bar(aes(y = (..count..)/sum(..count..))) + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust = -0.5) + scale_y_continuous(labels = scales::percent, limits = c(0,1)) + xlab('Rent') + ylab("Percentatge")
# Ingressos anuals vehicle
# En primer lloc establim que la edat mínima amb la que treballem és d'un any
# per tal d'evitar divisors de "0"
edat = ds$age
edat[edat == 0] = 1
ds['income'] <- ds$rate.daily * ds$renterTripsTaken / edat
# Calculem gràfic de barres de la nova variable
ggplot(data=ds, aes(x=ds$income)) + geom_histogram(breaks=seq(0, 1000, by=10), alpha = 1) + labs(title="Histogram for Income", x="Income", y="Count") + xlim(c(0,1000)) + ylim(c(0,500))
ggplot(data=ds, aes(x=ds$income)) +
geom_histogram(breaks=seq(0, 10000, by=100), alpha = 1) +
labs(title="Histogram for Income", x="Income", y="Count") +
xlim(c(0,10000)) +
ylim(c(0,2000))
# Freqüència d'us del vehicle (vegades a l'any)
# En primer lloc establim que la edat mínima amb la que treballem és d'un any
# per tal d'evitar divisors de "0"
edat = ds$age
edat[edat == 0] = 1
ds['frequency'] <- ds$renterTripsTaken / edat
# Calculem gràfic de barres de la nova variable
ggplot(data=ds, aes(x=ds$frequency)) +
geom_histogram(breaks=seq(0, 1000, by=10),
alpha = 1) +
labs(title="Histogram for frequency", x="frequency", y="Count")
ggplot(data=ds, aes(x=ds$frequency)) +
geom_histogram(breaks=seq(0, 150, by=1.5), alpha = 1) +
labs(title="Histogram for frequency", x="frequency", y="Count") +
xlim(c(0,150)) +
ylim(c(0,200))
# Exportació de les dades preprocessades a un fitxer .CSV
write.csv(ds, '../data/CarRentalDataV1_Clean.csv')
# Eliminem location.country i les coordenades geogràfiques
ds <- subset(ds, select=-c(location.latitude,location.longitude,
location.country))
categorical_features_names = c('fuelType', 'location.city', 'location.state', 'owner.id', 'vehicle.make', 'vehicle.model', 'vehicle.type', 'airportcity', 'range', 'population.discr')
numeric_features_names = c('rating', 'renterTripsTaken', 'reviewCount', 'rate.daily', 'age', 'income', 'frequency', 'population')
alpha = 0.05
col.names = colnames(ds)
for (i in 1:ncol(ds)) {
if (i == 1) cat("Variables que no presenten una distribució normal:\n")
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
p_val = ad.test(ds[,i])$p.value
if (p_val < alpha) {
cat(col.names[i])
# Format output
if (i < ncol(ds) - 1) cat(", ")
if (i %% 3 == 0) cat("\n")
}
}
}
qqnorm(ds$rate.daily, ylab="Daily Rate", xlab="Theorical Quantiles", main="Normal Q-Q Plot")
qqline(ds$rate.daily)
ds$rate.daily <- log(ds$rate.daily)
ggplot(ds, aes(x = rate.daily)) +  geom_histogram() +  ylab("Nombre de vehicles") + xlab("Preu de venda")
qqnorm(ds$rate.daily, ylab="Daily Rate normalized", xlab="Theorical Quantiles", main="Normal Q-Q Plot")
qqline(ds$rate.daily)
lambda_optima <- BoxCoxLambda(ds$rating)
ds$rating_norm <- BoxCox(ds$rating, lambda = lambda_optima)
ggplot(ds, aes(x = rating)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Puntuació")
ggplot(ds, aes(x = rating_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Puntuació normalitzada")
lambda_optima <- BoxCoxLambda(ds$renterTripsTaken)
ds$renterTripsTaken_norm <- BoxCox(ds$renterTripsTaken, lambda = lambda_optima)
ggplot(ds, aes(x = renterTripsTaken)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Nombre de lloguers realitzats")
ggplot(ds, aes(x = renterTripsTaken_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Nombre normalitzat de lloguers realitzats")
lambda_optima <- BoxCoxLambda(ds$reviewCount)
ds$reviewCount_norm <- BoxCox(ds$reviewCount, lambda = lambda_optima)
ggplot(ds, aes(x = reviewCount)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Nombre de comentaris")
ggplot(ds, aes(x = reviewCount_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Nombre normalitzat de comentaris ")
lambda_optima <- BoxCoxLambda(ds$vehicle.year)
ds$vehicle.year_norm <- BoxCox(ds$vehicle.year, lambda = lambda_optima)
ggplot(ds, aes(x = vehicle.year)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Any del cotxe")
ggplot(ds, aes(x = vehicle.year_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Any del cotxe normalitzat")
lambda_optima <- BoxCoxLambda(ds$income)
ds$income_norm <- BoxCox(ds$income, lambda = lambda_optima)
ggplot(ds, aes(x = income)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Ingressos anuals del cotxe")
ggplot(ds, aes(x = income_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Ingressos anuals normalitzats del cotxe")
lambda_optima <- BoxCoxLambda(ds$frequency)
ds$frequency_norm <- BoxCox(ds$frequency, lambda = lambda_optima)
ggplot(ds, aes(x = frequency)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Freqüència anual d'us del cotxe")
ggplot(ds, aes(x = frequency_norm)) +  geom_histogram() +  ylab("Nombre de cotxes") + xlab("Freqüència anual normalitzada d'us del cotxe")
# Eliminem location.country i les coordenades geogràfiques
ds <- subset(ds, select=-c(rating_norm, renterTripsTaken_norm, reviewCount_norm, vehicle.year_norm, income_norm, frequency_norm))
numeric_features_names = c('rating', 'renterTripsTaken', 'reviewCount', 'rate.daily', 'age', 'income', 'frequency', 'population')
# Relació entre el preu diari del lloguer i el nombre de vegades que s'ha llogat el vehicle
ggplot(ds, aes(x=renterTripsTaken, y=rate.daily)) + geom_point()
# Relació entre el preu diari del lloguer i ela freqüencia amb que s'ha llogat un vehicle
ggplot(ds, aes(x=frequency, y=rate.daily)) + geom_point()
# Relació entre e l'edat i el nombre de vegades que s'ha llogat el vehicle
ggplot(ds, aes(x=age, y=rate.daily)) + geom_point()
# Relació entre ela població de l'estat i el nombre de vegades que s'ha llogat el vehicle
ggplot(ds, aes(x=population, y=rate.daily)) + geom_point()
# Relació entre el preu diari del lloguer i el tipus de combustible
ggplot(ds, aes(x=fuelType, y=rate.daily, fill=fuelType)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean)
# Relació entre el preu diari del lloguer i l'estat on es localitza el vehicle
ggplot(ds, aes(x=location.state, y=rate.daily, fill=location.state)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
# Relació entre el preu diari del lloguer i la població que té l'estat on es troba el cotxe (discret)
ggplot(ds, aes(x=population.discr, y=rate.daily, fill=population.discr)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
# Relació entre el renterTripstaken i la població que té l'estat on es troba el cotxe (discret)
ggplot(ds, aes(x=population.discr, y=renterTripsTaken, fill=population.discr)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
# Relació entre el preu diari del lloguer i la marca del vehicle
ggplot(ds, aes(x=vehicle.make, y=rate.daily, fill=vehicle.make)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
# Relació entre el preu diari del lloguer i la gamma del vehicle
ggplot(ds, aes(x=range, y=rate.daily, fill=range)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
# Relació entre la freqüencia del lloguer i la gamma del vehicle
ggplot(ds, aes(x=range, y=frequency, fill=range)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
# Relació entre el preu diari del lloguer, la gamma del vehicle i el lcombustible
ggplot(ds, aes(x=range, y=rate.daily, fill=fuelType)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean) + theme(axis.text.x = element_text(angle = 90,vjust = 0.1,hjust = 0.1)) + theme(legend.position = "none")
# Relació entre el preu diari del lloguer i el tipus de vehicle
ggplot(ds, aes(x=vehicle.type, y=rate.daily, fill=vehicle.type)) + geom_boxplot(alpha=0.1) + stat_summary(fun.y=mean)
ggpairs(ds, columns=numeric_features_names, mapping=aes(color=rent), upper = list(continuous = wrap('cor', size = 2)))
ggpairs(ds, columns=numeric_features_names, mapping=aes(color=rating.discret), upper = list(continuous = wrap('cor', size = 2)))
heat <- ds[,numeric_features_names]
qplot(x=Var1, y=Var2, data=melt(cor(heat, use="p")), fill=value, geom="tile") + theme(axis.text.x = element_text(angle = 90)) + coord_fixed()
corr_matrix <- matrix(nc = 2, nr = 0)
colnames(corr_matrix) <- c("estimate", "p-value")
# Calcular el coeficiente de correlación para cada variable cuantitativa
# con respecto al campo "precio"
for (i in 1:(ncol(ds) - 1)) {
if (is.integer(ds[,i]) | is.numeric(ds[,i])) {
spearman_test = cor.test(ds[,i], ds[,'rate.daily'], method = "spearman")
corr_coef = spearman_test$estimate
p_val = spearman_test$p.value
# Add row to matrix
pair = matrix(ncol = 2, nrow = 1)
pair[1][1] = corr_coef
pair[2][1] = p_val
corr_matrix <- rbind(corr_matrix, pair)
rownames(corr_matrix)[nrow(corr_matrix)] <- colnames(ds)[i]
}
}
print(corr_matrix)
par(mfrow=c(1,3))
x <- ds$rate.daily
qq1 <- qqnorm(x, main = "Normal Q-Q Plot 'Daily rate'")
qqline(x)
x <- ds$rate.daily[ds$fuelType == 'ELECTRIC']
qq2 <- qqnorm(x, main = "Normal Q-Q Plot 'DR - ELECTRIC'")
qqline(x)
x <- ds$rate.daily[ds$fuelType == 'GASOLINE']
qq3 <- qqnorm(x, main = "Normal Q-Q Plot 'DR - GASOLINE'")
qqline(x)
# Obtenim les dades
ELECTRIC <- ds$rate.daily[ds$fuelType == 'ELECTRIC']
GASOLINE <- ds$rate.daily[ds$fuelType == 'GASOLINE']
# Calculem el test d’igualtat de variàncies, amb la funció var.test d'R
var.test(ELECTRIC, GASOLINE)
# variàncies diferents
t.test( ds$rate.daily[ds$fuelType == 'ELECTRIC'],  ds$rate.daily[ds$fuelType == 'GASOLINE'], alternative="greater", var.equal=FALSE)
n <- length(ds$vehicle.type)
prop.test(x=sum(ds$vehicle.type == "van"  | ds$vehicle.type == "minivan"), n=n, p=0.5, alternative="less", correct=FALSE)
car <- ds[ds$vehicle.type == "car", "rate.daily"]
minivan <- ds[ds$vehicle.type == "minivan", "rate.daily"]
suv <- ds[ds$vehicle.type == "suv", "rate.daily"]
truck <- ds[ds$vehicle.type == "truck", "rate.daily"]
van <- ds[ds$vehicle.type == "van", "rate.daily"]
bartlett.test(list(car, minivan, suv, truck, van))
diesel <- ds[ds$vehicle.type == "car", "rate.daily"]
electric <- ds[ds$vehicle.type == "minivan", "rate.daily"]
gasoline <- ds[ds$vehicle.type == "suv", "rate.daily"]
hybrid <- ds[ds$vehicle.type == "truck", "rate.daily"]
bartlett.test(list(diesel, electric, gasoline, hybrid))
model.lm1 <- lm(formula=rate.daily ~ age + renterTripsTaken, data = ds)
summary(model.lm1)
model.lm2 <- lm(formula=rate.daily ~ fuelType + vehicle.make + vehicle.type, data = ds)
summary(model.lm2)
model.lm2_2 <- lm(formula=rate.daily ~ fuelType + range + vehicle.type, data = ds)
summary(model.lm2_2)
model.lm3 <- lm(formula=rate.daily ~ age + renterTripsTaken + fuelType + vehicle.make + vehicle.type, data = ds)
summary(model.lm3)
model.lm4 <- lm(formula=rate.daily ~ age + renterTripsTaken + fuelType + range + vehicle.type + population.discr, data = ds)
summary(model.lm4)
# Creem el conjunt d'entrenament i el de prova
set.seed(555)
indexes = sample(1:nrow(ds), size=floor((2/3)*nrow(ds)))
train <- ds[indexes,]
test  <- ds[-indexes,]
# Verifiquem les dimensions del conjunt d'entrenament
dim(train)
# Verifiquem les dimensions del conjunt de prova
dim(test)
# Obtenim l'atribut de classe de la resta
trainY <- train[,c('rate.daily')]
testY <- test[,c('rate.daily')]
# Generem el model d'arbre
model_cart_rate <- rpart(rate.daily ~ fuelType + location.city + location.state + vehicle.make + vehicle.model + vehicle.type, method="anova", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rate)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rate)
predicted_model_cart_rate <- predict(model_cart_rate, test, type = "vector")
# test RMSE
rmse_cart_rate <- rmse(predicted_model_cart_rate, testY)
# test MAE
mae_cart_rate <- mae(predicted_model_cart_rate, testY)
print(sprintf("RMSE: %.4f", rmse_cart_rate))
print(sprintf("MAE: %.4f", rmse_cart_rate))
plot(predicted_model_cart_rate, testY, xlab = "Predicted", ylab = "Actual")
abline(0, 1)
model_cart_rate$variable.importance
# Generem el model d'arbre
model_cart_rate_2 <- rpart(rate.daily ~ fuelType + range + population.discr + vehicle.model + vehicle.type, method="anova", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rate)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rate_2)
predicted_model_cart_rate_2 <- predict(model_cart_rate_2, test, type = "vector")
# test RMSE
rmse_cart_rate_2 <- rmse(predicted_model_cart_rate_2, testY)
# test MAE
mae_cart_rate_2 <- mae(predicted_model_cart_rate_2, testY)
print(sprintf("RMSE: %.4f", rmse_cart_rate_2))
print(sprintf("MAE: %.4f", rmse_cart_rate_2))
plot(predicted_model_cart_rate_2, testY, xlab = "Predicted", ylab = "Actual")
abline(0, 1)
model_cart_rate_2$variable.importance
# Generem el model d'arbre
model_cart_rate_2 <- rpart(rate.daily ~ fuelType + range + population.discr + vehicle.model + vehicle.type, method="anova", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rate)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rate_2)
# Generem el model d'arbre
model_cart_rate_2 <- rpart(rate.daily ~ fuelType + range + population.discr + vehicle.model + vehicle.type, method="anova", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rate)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rate_2, gp = gpar(fontsize = 6))
# Generem el model d'arbre
model_cart_rate_2 <- rpart(rate.daily ~ fuelType + range + population.discr + vehicle.model + vehicle.type, method="anova", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rate)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rate_2, cex=0.6)
# Generem el model d'arbre
model_cart_rate_2 <- rpart(rate.daily ~ fuelType + range + population.discr + vehicle.model + vehicle.type, method="anova", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rate)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rate_2, cex=0.8)
# Generem el model d'arbre
model_cart_rate_2 <- rpart(rate.daily ~ fuelType + range + population.discr + vehicle.type, method="anova", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rate)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rate_2, cex=0.8)
predicted_model_cart_rate_2 <- predict(model_cart_rate_2, test, type = "vector")
# test RMSE
rmse_cart_rate_2 <- rmse(predicted_model_cart_rate_2, testY)
# test MAE
mae_cart_rate_2 <- mae(predicted_model_cart_rate_2, testY)
print(sprintf("RMSE: %.4f", rmse_cart_rate_2))
print(sprintf("MAE: %.4f", rmse_cart_rate_2))
plot(predicted_model_cart_rate_2, testY, xlab = "Predicted", ylab = "Actual")
abline(0, 1)
model_cart_rate_2$variable.importance
# Generem el model d'arbre
model_cart_rate <- rpart(rate.daily ~ fuelType + location.city + location.state + vehicle.make + vehicle.model + vehicle.type, method="anova", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rate)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rate, cex=0.5)
# Generem el model d'arbre
model_cart_rate <- rpart(rate.daily ~ fuelType + location.city + location.state + vehicle.make + vehicle.model + vehicle.type, method="anova", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rate)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rate, cex=0.6)
# Obtenim l'atribut de classe de la resta
trainY <- train[,c('rent')]
testY <- test[,c('rent')]
# Generem el model d'arbre
model_cart_rent_2 <- rpart(rent ~ fuelType + population.discr + range + vehicle.type, method="class", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rent)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rent_2)
predicted_model_cart_rent_2 <- predict(model_cart_rent_2, test, type = "class")
print(sprintf("La precisió de l'arbre és: %.4f %%", 100 * sum(predicted_model_cart_rent_2 == testY) / length(predicted_model_cart_rent_2)))
mat_conf_cart_rent_2 <- table(testY, Predicted=predicted_model_cart_rent_2)
mat_conf_cart_rent_2
porcentaje_correct_2 <- 100 * sum(diag(mat_conf_cart_rent_2)) / sum(mat_conf_cart_rent_2)
print(sprintf("El %% de registres correctament classificats és: %.4f %%", porcentaje_correct_2))
CrossTable(testY, predicted_model_cart_rent_2, prop.chisq  = FALSE, prop.c = FALSE, prop.r =FALSE, dnn = c('Reality', 'Prediction'))
# Calculem histogrames de les variables de classe
ggplot(data=ds, aes(x = rent)) + geom_bar(aes(y = (..count..)/sum(..count..))) + geom_text(aes(y = ((..count..)/sum(..count..)), label = scales::percent((..count..)/sum(..count..))), stat = "count", vjust = -0.5) + scale_y_continuous(labels = scales::percent, limits = c(0,1)) + xlab("Rent") + ylab("Freqüència")
set.seed(2)
# Escollim els atributs sobre els quals treballarem
train.data <- train
train.data[,"Class"] <- train['rent']
test.data <- test
test.data[,"Class"] <- test['rent']
# Construïm diferents mostres a partir del conjunt de dades original
# Down sampling
down_train <- downSample(x = train.data[, -ncol(train.data)], y = train.data$Class)
# Up Sampling
up_train <- upSample(x = train.data[, -ncol(train.data)], y = train.data$Class)
# Mix up/down sampling SMOTE
smote_train <- SMOTE(Class ~ ., data = train.data)
# Mostrem el nombre d'observacions pertanyents a cada una de les clases després de la generació de mostres
# Conjunt original
table(train.data$Class)
# Down sampling
table(down_train$Class)
# Up sampling
table(up_train$Class)
# Smote sampling
table(smote_train$Class)
# Model training - CART
set.seed(4)
down_outside <- rpart(rent ~ fuelType + population.discr + range + vehicle.type, method="class", data=down_train)
set.seed(5)
up_outside <- rpart(rent ~ fuelType + population.discr + range + vehicle.type, method="class", data=up_train)
set.seed(6)
smote_outside <- rpart(rent ~ fuelType + population.discr + range  + vehicle.type, method="class", data=smote_train)
predicted_model_cart_rent_2 <- predict(down_outside, test.data, type = "class")
print(sprintf("La precisió de l'arbre amb downsampling és: %.4f %%", 100 * sum(ppredicted_model_cart_rent_2 == test.data[,"Class"]) / length(predicted_model_cart_rent_2)))
predicted_model_cart_rent_2 <- predict(down_outside, test.data, type = "class")
print(sprintf("La precisió de l'arbre amb downsampling és: %.4f %%", 100 * sum(predicted_model_cart_rent_2 == test.data[,"Class"]) / length(predicted_model_cart_rent_2)))
predicted_model_cart_rent_2 <- predict(up_outside, test.data, type = "class")
print(sprintf("La precisió de l'arbre amb upsampling és: %.4f %%", 100 * sum(predicted_model_cart_rent_2 == test.data[,"Class"]) / length(predicted_model_cart_rent_2)))
predicted_model_cart_rent_2 <- predict(smote_outside, test.data, type = "class")
print(sprintf("La precisió de l'arbre amb smote sampling és: %.4f %%", 100 * sum(predicted_model_cart_rent_2 == test.data[,"Class"]) / length(predicted_model_cart_rent_2)))
# Generem el model d'arbre
model_cart_rent <- rpart(rent ~ fuelType + location.city + location.state + vehicle.make + vehicle.model + vehicle.type, method="class", data=train)
# Mostrem un resum de la generació de l'arbre
#summary(model_cart)
#printcp(model_cart_rent)
# Mostrem en un gràfic l'arbre obtingut
rpart.plot(model_cart_rent, cex=0.6)
